{
  "version": 3,
  "sources": ["../../src/storage-adapter/fs-adapter.ts"],
  "sourcesContent": ["/* eslint-disable @typescript-eslint/no-this-alias */\n/* eslint-disable no-prototype-builtins */\n/**\n * A Sylvie persistence adapter which persists using node fs module\n */\nimport { NormalSyncPersistenceAdapter } from \"./persistence-adapter\";\n\nexport class FsAdapter implements NormalSyncPersistenceAdapter {\n  fs?: typeof import(\"node:fs/promises\");\n  mode: \"normal\";\n\n  async #initializeFS() {\n    if (this.fs === null || this.fs === undefined) {\n      try {\n        this.fs = await import(\"node:fs/promises\");\n      } catch (e) {\n        // Silently fail - likely attempting to import fs from a browser\n        console.error(`FsAdapter - ${e}`);\n      }\n    }\n  }\n\n  /** loadDatabase() - Load data from file, will throw an error if the file does not exist\n   * @param {string} dbname - the filename of the database to load\n   * @param {function} callback - the callback to handle the result\n   * @memberof LokiFsAdapter\n   */\n  loadDatabase = (\n    dbname: string,\n    callback: (serialized: string | Error) => void,\n  ): void => {\n    this.#initializeFS().then(() => {\n      this.fs\n        .stat(dbname)\n        .then((stats) => {\n          if (stats.isFile()) {\n            this.fs\n              .readFile(dbname, {\n                encoding: \"utf8\",\n              })\n              .then((data) => {\n                callback(data);\n              })\n              .catch((err) => {\n                callback(err);\n              });\n          }\n        })\n        .catch((err) => {\n          callback(err);\n        })\n        .catch(callback);\n    });\n  };\n\n  /**\n   * saveDatabase() - save data to file, will throw an error if the file can't be saved\n   * might want to expand this to avoid dataloss on partial save\n   * @param {string} dbname - the filename of the database to load\n   * @param {function} callback - the callback to handle the result\n   * @memberof LokiFsAdapter\n   */\n  saveDatabase = (\n    dbname: string,\n    dbstring: string,\n    callback: (\n      _?: Error | { success: true } | { success: false; error: Error },\n    ) => void,\n  ) => {\n    this.#initializeFS()\n      .then(() => {\n        const tmpdbname = `${dbname}~`;\n        this.fs\n          .writeFile(tmpdbname, dbstring)\n          .then(() => {\n            this.fs\n              .rename(tmpdbname, dbname)\n              .then(() => callback())\n              .catch(callback);\n          })\n          .catch(callback);\n      })\n      .catch(callback);\n  };\n\n  /**\n   * deleteDatabase() - delete the database file, will throw an error if the\n   * file can't be deleted\n   * @param {string} dbname - the filename of the database to delete\n   * @param {function} callback - the callback to handle the result\n   * @memberof LokiFsAdapter\n   */\n  deleteDatabase = (\n    dbname: string,\n    callback: (\n      _?: Error | { success: true } | { success: false; error: Error },\n    ) => void,\n  ) => {\n    this.#initializeFS()\n      .then(() => {\n        this.fs\n          .unlink(dbname)\n          .then(() => callback())\n          .catch((err) => {\n            callback(err);\n          });\n      })\n      .catch(callback);\n  };\n}\n"],
  "mappings": "ohBAAA,IAAAA,EAAAC,EAOaC,EAAN,KAAwD,CAAxD,cAILC,EAAA,KAAMH,GAgBN,kBAAeI,EAAA,CACbC,EACAC,IACS,CACTC,EAAA,KAAKP,EAAAC,GAAL,WAAqB,KAAK,IAAM,CAC9B,KAAK,GACF,KAAKI,CAAM,EACX,KAAMG,GAAU,CACXA,EAAM,OAAO,GACf,KAAK,GACF,SAASH,EAAQ,CAChB,SAAU,MACZ,CAAC,EACA,KAAMI,GAAS,CACdH,EAASG,CAAI,CACf,CAAC,EACA,MAAOC,GAAQ,CACdJ,EAASI,CAAG,CACd,CAAC,CAEP,CAAC,EACA,MAAOA,GAAQ,CACdJ,EAASI,CAAG,CACd,CAAC,EACA,MAAMJ,CAAQ,CACnB,CAAC,CACH,EA1Be,gBAmCf,kBAAeF,EAAA,CACbC,EACAM,EACAL,IAGG,CACHC,EAAA,KAAKP,EAAAC,GAAL,WACG,KAAK,IAAM,CACV,IAAMW,EAAY,GAAGP,KACrB,KAAK,GACF,UAAUO,EAAWD,CAAQ,EAC7B,KAAK,IAAM,CACV,KAAK,GACF,OAAOC,EAAWP,CAAM,EACxB,KAAK,IAAMC,EAAS,CAAC,EACrB,MAAMA,CAAQ,CACnB,CAAC,EACA,MAAMA,CAAQ,CACnB,CAAC,EACA,MAAMA,CAAQ,CACnB,EArBe,gBA8Bf,oBAAiBF,EAAA,CACfC,EACAC,IAGG,CACHC,EAAA,KAAKP,EAAAC,GAAL,WACG,KAAK,IAAM,CACV,KAAK,GACF,OAAOI,CAAM,EACb,KAAK,IAAMC,EAAS,CAAC,EACrB,MAAOI,GAAQ,CACdJ,EAASI,CAAG,CACd,CAAC,CACL,CAAC,EACA,MAAMJ,CAAQ,CACnB,EAhBiB,kBAiBnB,EAtGaF,EAAAF,EAAA,aAILF,EAAA,YAAAC,EAAaG,EAAA,UAAG,QAAAS,EAAA,sBACpB,GAAI,KAAK,KAAO,MAAQ,KAAK,KAAO,OAClC,GAAI,CACF,KAAK,GAAK,KAAM,QAAO,kBAAkB,CAC3C,OAASC,EAAP,CAEA,QAAQ,MAAM,eAAeA,GAAG,CAClC,CAEJ,IATmB",
  "names": ["_initializeFS", "initializeFS_fn", "FsAdapter", "__privateAdd", "__name", "dbname", "callback", "__privateMethod", "stats", "data", "err", "dbstring", "tmpdbname", "__async", "e"]
}
