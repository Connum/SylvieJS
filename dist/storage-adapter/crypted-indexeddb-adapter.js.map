{
  "version": 3,
  "sources": ["../../src/storage-adapter/crypted-indexeddb-adapter/string-encryption-utils.ts", "../../src/storage-adapter/crypted-indexeddb-adapter/sylvie-catalog.ts", "../../src/storage-adapter/crypted-indexeddb-adapter.ts"],
  "sourcesContent": ["export function base64ToBytes(str: string) {\n  if (str.length % 4 !== 0) {\n    throw new Error(\"Unable to parse base64 string (invalid length).\");\n  }\n  const index = str.indexOf(\"=\");\n  if (index !== -1 && index < str.length - 2) {\n    throw new Error(\"Unable to parse base64 string (octets).\");\n  }\n  const missingOctets = str.endsWith(\"==\") ? 2 : str.endsWith(\"=\") ? 1 : 0,\n    n = str.length,\n    result = new Uint8Array(3 * (n / 4));\n  let buffer;\n  for (let i = 0, j = 0; i < n; i += 4, j += 3) {\n    buffer =\n      (getBase64Code(str.charCodeAt(i)) << 18) |\n      (getBase64Code(str.charCodeAt(i + 1)) << 12) |\n      (getBase64Code(str.charCodeAt(i + 2)) << 6) |\n      getBase64Code(str.charCodeAt(i + 3));\n    result[j] = buffer >> 16;\n    result[j + 1] = (buffer >> 8) & 255;\n    result[j + 2] = buffer & 255;\n  }\n  return result.subarray(0, result.length - missingOctets);\n}\n\nconst base64abc = [\n  \"A\",\n  \"B\",\n  \"C\",\n  \"D\",\n  \"E\",\n  \"F\",\n  \"G\",\n  \"H\",\n  \"I\",\n  \"J\",\n  \"K\",\n  \"L\",\n  \"M\",\n  \"N\",\n  \"O\",\n  \"P\",\n  \"Q\",\n  \"R\",\n  \"S\",\n  \"T\",\n  \"U\",\n  \"V\",\n  \"W\",\n  \"X\",\n  \"Y\",\n  \"Z\",\n  \"a\",\n  \"b\",\n  \"c\",\n  \"d\",\n  \"e\",\n  \"f\",\n  \"g\",\n  \"h\",\n  \"i\",\n  \"j\",\n  \"k\",\n  \"l\",\n  \"m\",\n  \"n\",\n  \"o\",\n  \"p\",\n  \"q\",\n  \"r\",\n  \"s\",\n  \"t\",\n  \"u\",\n  \"v\",\n  \"w\",\n  \"x\",\n  \"y\",\n  \"z\",\n  \"0\",\n  \"1\",\n  \"2\",\n  \"3\",\n  \"4\",\n  \"5\",\n  \"6\",\n  \"7\",\n  \"8\",\n  \"9\",\n  \"_\",\n  \"-\",\n];\n\nexport const base64codes = (() => {\n  const l = 256;\n  const base64codes = new Uint8Array(l);\n  for (let i = 0; i < l; ++i) {\n    base64codes[i] = 255; // invalid character\n  }\n  base64abc.forEach((char, index) => {\n    base64codes[char.charCodeAt(0)] = index;\n  });\n  base64codes[\"=\".charCodeAt(0)] = 0; // ignored anyway, so we just need to prevent an error\n  return base64codes;\n})();\n\nexport function getBase64Code(charCode: number) {\n  if (charCode >= base64codes.length) {\n    throw new Error(\"Unable to parse base64 string (code beyond length).\");\n  }\n  const code = base64codes[charCode]!;\n  if (code === 255) {\n    throw new Error(\"Unable to parse base64 string (invalid code).\");\n  }\n  return code;\n}\n\nexport function bytesToBase64(bytes: Uint8Array) {\n  let result = \"\",\n    i,\n    l = bytes.length;\n  for (i = 2; i < l; i += 3) {\n    result += base64abc[bytes[i - 2]! >> 2];\n    result += base64abc[((bytes[i - 2]! & 0x03) << 4) | (bytes[i - 1]! >> 4)];\n    result += base64abc[((bytes[i - 1]! & 0x0f) << 2) | (bytes[i]! >> 6)];\n    result += base64abc[bytes[i]! & 0x3f];\n  }\n  if (i === l + 1) {\n    // 1 octet yet to write\n    result += base64abc[bytes[i - 2]! >> 2];\n    result += base64abc[(bytes[i - 2]! & 0x03) << 4];\n    result += \"==\";\n  }\n  if (i === l) {\n    // 2 octets yet to write\n    result += base64abc[bytes[i - 2]! >> 2];\n    result += base64abc[((bytes[i - 2]! & 0x03) << 4) | (bytes[i - 1]! >> 4)];\n    result += base64abc[(bytes[i - 1]! & 0x0f) << 2];\n    result += \"=\";\n  }\n  return result;\n}\n\nexport function base64encode(str: string, encoder = new TextEncoder()) {\n  return bytesToBase64(encoder.encode(str));\n}\n\nexport function base64decode(str: string, decoder = new TextDecoder()) {\n  return decoder.decode(base64ToBytes(str));\n}\n\nexport const getPasswordKey = (password) => {\n  const enc = new TextEncoder();\n  return window.crypto.subtle.importKey(\n    \"raw\",\n    enc.encode(password),\n    \"PBKDF2\",\n    false,\n    [\"deriveKey\"]\n  );\n};\n\nexport const deriveKey = (passwordKey, salt, keyUsage) =>\n  window.crypto.subtle.deriveKey(\n    {\n      name: \"PBKDF2\",\n      salt: salt,\n      iterations: 250000,\n      hash: \"SHA-256\",\n    },\n    passwordKey,\n    { name: \"AES-GCM\", length: 256 },\n    false,\n    keyUsage\n  );\n\nexport async function encryptData(secretData, password) {\n  try {\n    const salt = window.crypto.getRandomValues(new Uint8Array(16));\n    const iv = window.crypto.getRandomValues(new Uint8Array(12));\n    const passwordKey = await getPasswordKey(password);\n    const aesKey = await deriveKey(passwordKey, salt, [\"encrypt\"]);\n    const encryptedContent = await window.crypto.subtle.encrypt(\n      {\n        name: \"AES-GCM\",\n        iv: iv,\n      },\n      aesKey,\n      new TextEncoder().encode(secretData)\n    );\n\n    const encryptedContentArr = new Uint8Array(encryptedContent);\n    const buff = new Uint8Array(\n      salt.byteLength + iv.byteLength + encryptedContentArr.byteLength\n    );\n    buff.set(salt, 0);\n    buff.set(iv, salt.byteLength);\n    buff.set(encryptedContentArr, salt.byteLength + iv.byteLength);\n    const base64Buff = bytesToBase64(buff);\n    return base64Buff;\n  } catch (e) {\n    console.log(`Encryption Error - ${e}`);\n    throw e;\n  }\n}\n\nexport async function decryptData(encryptedData, password) {\n  try {\n    const encryptedDataBuff = base64ToBytes(encryptedData);\n    const salt = encryptedDataBuff.slice(0, 16);\n    const iv = encryptedDataBuff.slice(16, 16 + 12);\n    const data = encryptedDataBuff.slice(16 + 12);\n    const passwordKey = await getPasswordKey(password);\n\n    const aesKey = await deriveKey(passwordKey, salt, [\"decrypt\"]);\n    const decryptedContent = await window.crypto.subtle.decrypt(\n      {\n        name: \"AES-GCM\",\n        iv: iv,\n      },\n      aesKey,\n      data\n    );\n    return new TextDecoder().decode(decryptedContent);\n  } catch (e) {\n    console.log(`Decryption Error - ${e}`);\n    throw e;\n  }\n}\n", "/**\n * LokiCatalog - underlying App/Key/Value catalog persistence\n *    This non-interface class implements the actual persistence.\n *    Used by the IndexedDBAdapter class.\n */\nexport class SylvieCatalog {\n  db: IDBDatabase;\n  constructor(callback: (SylvieCatalog) => void) {\n    this.db = null;\n    if (callback) {\n      this.#initializeCatalog()\n        .then((res) => {\n          if (typeof callback === \"function\") {\n            callback(res);\n          }\n        })\n        .catch((err) => {\n          console.log(err);\n          throw err;\n        });\n    }\n  }\n\n  /**\n   * An alternative to passing a callback to the constructor\n   */\n  initialize(): Promise<SylvieCatalog> {\n    return new Promise((resolve, reject) => {\n      this.#initializeCatalog()\n        .then((res) => {\n          resolve(res);\n        })\n        .catch((err) => {\n          console.log(err);\n          reject(err);\n        });\n    });\n  }\n\n  openCatalog() {\n    const openRequest = indexedDB.open(\"SylvieCatalog\", 1);\n\n    openRequest.onupgradeneeded = ({ target }) => {\n      const thisDB = (target as any).result;\n      if (thisDB.objectStoreNames.contains(\"SylvieAKV\")) {\n        thisDB.deleteObjectStore(\"SylvieAKV\");\n      }\n\n      if (!thisDB.objectStoreNames.contains(\"SylvieAKV\")) {\n        const objectStore = thisDB.createObjectStore(\"SylvieAKV\", {\n          keyPath: \"id\",\n          autoIncrement: true,\n        });\n        objectStore.createIndex(\"app\", \"app\", { unique: false });\n        objectStore.createIndex(\"key\", \"key\", { unique: false });\n        objectStore.createIndex(\"appkey\", \"appkey\", { unique: true });\n      }\n    };\n\n    return openRequest;\n  }\n\n  async #initializeCatalog(): Promise<SylvieCatalog> {\n    const cat = this;\n    const openRequest = this.openCatalog();\n\n    return new Promise((resolve, reject) => {\n      openRequest.onsuccess = ({ target }) => {\n        cat.db = (target as any).result;\n        resolve(cat);\n      };\n\n      openRequest.onerror = (e) => {\n        reject(e);\n      };\n    });\n  }\n\n  async getAppKeyAsync(\n    app,\n    key\n  ): Promise<\n    | {\n        app: string;\n        appkey: string;\n        id: number;\n        key: string;\n        val: string;\n      }\n    | {\n        id: 0;\n        success: false;\n      }\n  > {\n    const transaction = this.db.transaction([\"SylvieAKV\"], \"readonly\");\n    const store = transaction.objectStore(\"SylvieAKV\");\n    const index = store.index(\"appkey\");\n    const appkey = `${app},${key}`;\n    const request = index.get(appkey);\n\n    return new Promise((resolve, reject) => {\n      request.onsuccess = ({ target }) => {\n        let lres = (target as any).result;\n\n        if (lres === null || typeof lres === \"undefined\") {\n          lres = {\n            id: 0,\n            success: false,\n          };\n        }\n\n        resolve(lres);\n      };\n\n      request.onerror = (e) => {\n        reject(e);\n      };\n    });\n  }\n\n  async setAppKeyAsync(\n    app,\n    key,\n    val\n  ): Promise<{ success: false; error: Error } | { success: true }> {\n    const transaction = this.db.transaction([\"SylvieAKV\"], \"readwrite\");\n    const store = transaction.objectStore(\"SylvieAKV\");\n    const index = store.index(\"appkey\");\n    const appkey = `${app},${key}`;\n    const request = index.get(appkey);\n\n    return new Promise((resolve, reject) => {\n      request.onsuccess = ({ target }) => {\n        let res = (target as any).result;\n\n        if (res === null || res === undefined) {\n          res = {\n            app,\n            key,\n            appkey: `${app},${key}`,\n            val,\n          };\n        } else {\n          res.val = val;\n        }\n\n        const requestPut = store.put(res);\n\n        requestPut.onerror = () => {\n          reject({ success: false, error: requestPut.error });\n          console.error(\"SylvieCatalog.setAppKey (set) onerror\");\n          console.error(request.error);\n        };\n\n        requestPut.onsuccess = () => {\n          resolve({ success: true });\n        };\n      };\n\n      request.onerror = () => {\n        reject({ success: false, error: request.error });\n        console.error(\"SylvieCatalog.setAppKey (get) onerror\");\n        console.error(request.error);\n      };\n    });\n  }\n\n  deleteAppKeyAsync(\n    id\n  ): Promise<{ success: true } | { success: false; error: Error }> {\n    const transaction = this.db.transaction([\"SylvieAKV\"], \"readwrite\");\n    const store = transaction.objectStore(\"SylvieAKV\");\n    const request = store.delete(id);\n\n    return new Promise((resolve, reject) => {\n      request.onsuccess = () => {\n        resolve({ success: true });\n      };\n\n      request.onerror = (e) => {\n        reject({ success: false, error: e });\n        console.error(\"SylvieCatalog.deleteAppKey raised onerror\");\n        console.error(request.error);\n      };\n    });\n  }\n\n  getAppKeys(app, callback) {\n    const transaction = this.db.transaction([\"SylvieAKV\"], \"readonly\");\n    const store = transaction.objectStore(\"SylvieAKV\");\n    const index = store.index(\"app\");\n\n    // We want cursor to all values matching our (single) app param\n    const singleKeyRange = IDBKeyRange.only(app);\n\n    // To use one of the key ranges, pass it in as the first argument of openCursor()/openKeyCursor()\n    const cursor = index.openCursor(singleKeyRange);\n\n    // cursor internally, pushing results into this.data[] and return\n    // this.data[] when done (similar to service)\n    const localdata = [];\n\n    cursor.onsuccess = ((data, callback) => () => {\n      const cur = cursor.result;\n      if (cur) {\n        const currObject = cur.value;\n\n        data.push(currObject);\n\n        cur.continue();\n      } else {\n        if (typeof callback === \"function\") {\n          callback(data);\n        } else {\n          console.log(data);\n        }\n      }\n    })(localdata, callback);\n\n    cursor.onerror = ((usercallback) => (e) => {\n      if (typeof usercallback === \"function\") {\n        usercallback(null);\n      } else {\n        console.error(\"SylvieCatalog.getAppKeys raised onerror\");\n        console.error(e);\n      }\n    })(callback);\n  }\n\n  // Hide 'cursoring' and return array of { id: id, key: key }\n  getAllKeys(callback) {\n    const transaction = this.db.transaction([\"SylvieAKV\"], \"readonly\");\n    const store = transaction.objectStore(\"SylvieAKV\");\n    const cursor = store.openCursor();\n\n    const localdata = [];\n\n    cursor.onsuccess = ((data, callback) => () => {\n      const cur = cursor.result;\n      if (cur) {\n        const currObject = cur.value;\n\n        data.push(currObject);\n\n        cur.continue();\n      } else {\n        if (typeof callback === \"function\") {\n          callback(data);\n        } else {\n          console.log(data);\n        }\n      }\n    })(localdata, callback);\n\n    cursor.onerror = ((usercallback) => (e) => {\n      if (typeof usercallback === \"function\") usercallback(null);\n    })(callback);\n  }\n}\n", "/* eslint-disable @typescript-eslint/no-empty-interface */\n/* eslint-disable @typescript-eslint/no-this-alias */\n/*\n  Sylvie IndexedDb Adapter (need to include this script to use it)\n\n  Console Usage can be used for management/diagnostic, here are a few examples :\n  adapter.getDatabaseList(); // with no callback passed, this method will log results to console\n  adapter.saveDatabase('UserDatabase', JSON.stringify(myDb));\n  adapter.loadDatabase('UserDatabase'); // will log the serialized db to console\n  adapter.deleteDatabase('UserDatabase');\n*/\nimport {\n  decryptData,\n  encryptData,\n} from \"./crypted-indexeddb-adapter/string-encryption-utils\";\nimport { SylvieCatalog } from \"./crypted-indexeddb-adapter/sylvie-catalog\";\nimport {\n  AsyncPersistenceAdapter,\n  PersistenceAdapter,\n} from \"./persistence-adapter\";\n// @ts-ignore\nconst DEBUG = typeof window !== \"undefined\" && !!window.__loki_idb_debug;\n\nif (DEBUG) {\n  console.log(\"DEBUG: Running crypted-indexeddb-adapter in DEBUG mode\");\n}\n\nif (!window.crypto.subtle) {\n  alert(\"Required crypto lib is not availible, are you using SSL?\");\n  throw new Error(\"Required crypto lib is not availible\");\n}\n\ninterface CryptedIndexedAdapterOptions {\n  appname: string;\n  closeAfterSave: boolean;\n  secret: string;\n}\n/**\n * Loki/Sylvie encrypted persistence adapter class for indexedDb.\n *     This class fulfills abstract adapter interface which can be applied to other storage methods.\n *     Utilizes the included SylvieCatalog app/key/value database for actual database persistence.\n *     IndexedDb storage is provided per-domain, so we implement app/key/value database to\n *     allow separate contexts for separate apps within a domain.\n *\n * @example\n * var idbAdapter = new CryptedIndexedDBAdapter('finance', {\n *  secret: \"pass\"\n * });\n *\n * @constructor SylvieIndexedAdapter\n *\n * @param {CryptedIndexedAdapterOptions} options Configuration options for the adapter\n * @param {string} options.appname - (Optional) Application name context can be used to distinguish subdomains, 'sylvie' by default\n * @param {boolean} options.closeAfterSave Whether the indexedDB database should be closed after saving.\n * @param {boolean} options.secret The password to encrypt with.\n */\nexport class CryptedIndexedDBAdapter\n  implements PersistenceAdapter, AsyncPersistenceAdapter\n{\n  isAsync: true;\n  app: string;\n  options: Partial<CryptedIndexedAdapterOptions>;\n  catalog: SylvieCatalog;\n  mode: string;\n  #secret: string;\n\n  constructor(options?: Partial<CryptedIndexedAdapterOptions>) {\n    DEBUG && console.log(\"Initialized crypted-indexeddb-adapter\");\n    this.app = \"sylvie\";\n    this.options = options || {};\n\n    if (typeof options?.appname !== \"undefined\") {\n      this.app = options?.appname;\n    }\n\n    // keep reference to catalog class for base AKV operations\n    this.catalog = null;\n\n    if (!this.#checkIDBAvailability()) {\n      throw new Error(\n        \"IndexedDB does not seem to be supported for your environment\"\n      );\n    }\n\n    if (options.secret) {\n      this.#secret = options.secret;\n    }\n  }\n\n  /**\n   * Sets a password for use on future load and save of the database.\n   * Note that this does not re-encrypt the database with the new password. Use changePassword() for that.\n   * @param secret\n   * @example\n   * const db = new Sylvie(TEST_DB_NAME, {\n   *   adapter: new CryptedIndexedDBAdapter();\n   * });\n   *\n   * adapter.usePassword(\"newpassword\");\n   *\n   * await newDb.loadDatabaseAsync({});\n   */\n  usePassword(secret: string) {\n    this.#secret = secret;\n  }\n\n  /**\n   * Used for closing the indexeddb database.\n   */\n  #closeDatabase = () => {\n    if (this.catalog && this.catalog.db) {\n      this.catalog.db.close();\n      this.catalog.db = null;\n    }\n  };\n\n  /**\n   * Used to check if adapter is available\n   *\n   * @returns {boolean} true if indexeddb is available, false if not.\n   */\n  #checkIDBAvailability() {\n    if (typeof indexedDB !== \"undefined\" && indexedDB) return true;\n    return false;\n  }\n\n  /**\n   * Retrieves a serialized db string from the catalog.\n   *\n   * @example\n   * // LOAD\n   * var idbAdapter = new SylvieIndexedAdapter('finance');\n   * var db = new loki('test', { adapter: idbAdapter });\n   *   db.loadDatabase(function(result) {\n   *   console.log('done');\n   * });\n   *\n   * @param {string} dbname - the name of the database to retrieve.\n   * @param {function} callback - callback should accept string param containing serialized db string.\n   */\n  loadDatabase = (dbname: string, callback: (serialized: string) => void) => {\n    DEBUG && console.debug(\"loading database\");\n\n    // lazy open/create db reference so dont -need- callback in constructor\n    if (this.catalog === null || this.catalog.db === null) {\n      this.catalog = new SylvieCatalog((catalog) => {\n        this.catalog = catalog;\n        this.loadDatabase(dbname, callback);\n      });\n      try {\n        this.catalog.initialize().then((catalog) => {\n          this.catalog = catalog;\n        });\n      } catch (e) {\n        console.log(e);\n      }\n      return;\n    }\n\n    // lookup up dbstring in AKV db\n    this.catalog.getAppKeyAsync(this.app, dbname).then((props) => {\n      const { success } = props as { success: boolean };\n      if (success === false) {\n        callback(null);\n        return;\n      } else {\n        const { val } = props as { val: string };\n        if (typeof callback === \"function\") {\n          const encryptedDbString = val;\n          decryptData(encryptedDbString, this.#secret)\n            .then((decryptedDbString) => {\n              DEBUG && console.debug(`DECRYPTED STRING: ${decryptedDbString}`);\n              callback(decryptedDbString);\n            })\n            .catch((err) => {\n              callback(err);\n            });\n        } else {\n          // support console use of api\n          console.log(val);\n        }\n      }\n    });\n  };\n\n  /**\n   * Retrieves a serialized db string from the catalog, returns a promise to a string of the serialized database.\n   * @param dbname\n   * @returns {Promise<string>} A promise to a string of the serialized database.\n   * @example\n   * const db = new Sylvie(TEST_DB_NAME, {\n   *  adapter: new CryptedIndexedDBAdapter();\n   * });\n   * await db.loadDatabaseAsync({});\n   * // db is now ready to use\n   * // you can also chain the promises\n   * await db.loadDatabaseAsync({}).then(() => {\n   * // db is now ready to use\n   * });\n   * // or use async await syntax\n   * await db.loadDatabaseAsync({});\n   * // db is now ready to use\n   * @memberof CryptedIndexedDBAdapter\n   * @throws {Error} If the database is not found.\n   * @throws {Error} If the database is not decrypted successfully.\n   * @throws {Error} If the database is not deserialized successfully.\n   */\n  loadDatabaseAsync = async (dbname: string): Promise<string> => {\n    DEBUG && console.debug(\"loading database\");\n\n    return new Promise((resolve, reject) => {\n      // lazy open/create db reference so dont -need- callback in constructor\n      if (this.catalog === null || this.catalog.db === null) {\n        this.catalog.initialize().then((catalog) => {\n          this.catalog = catalog;\n          this.loadDatabase(dbname, (str) => resolve(str));\n        });\n        return;\n      }\n\n      // lookup up dbstring in AKV db\n      this.catalog.getAppKeyAsync(this.app, dbname).then((props) => {\n        const { success } = props as { success: boolean };\n        if (success === false) {\n          reject(null);\n        } else {\n          const { val } = props as { val: string };\n          const encryptedDbString = val;\n          decryptData(encryptedDbString, this.#secret)\n            .then((decryptedDbString) => {\n              DEBUG && console.debug(`DECRYPTED STRING: ${decryptedDbString}`);\n              resolve(decryptedDbString);\n            })\n            .catch((err) => {\n              reject(err);\n            });\n        }\n      });\n    });\n  };\n\n  /**\n   * Saves a serialized db to the catalog.\n   *\n   * @example\n   * // SAVE : will save App/Key/Val as 'finance'/'test'/{serializedDb}\n   * var idbAdapter = new SylvieIndexedAdapter('finance');\n   * var db = new loki('test', { adapter: idbAdapter });\n   * var coll = db.addCollection('testColl');\n   * coll.insert({test: 'val'});\n   * db.saveDatabase();  // could pass callback if needed for async complete\n   *\n   * @param {string} dbname - the name to give the serialized database within the catalog.\n   * @param {string} dbstring - the serialized db string to save.\n   * @param {function} callback - (Optional) callback passed obj.success with true or false\n   */\n  saveDatabase = (\n    dbname: string,\n    dbstring: string,\n    callback?: (\n      err: Error | { success: true } | { success: false; error: Error }\n    ) => void\n  ) => {\n    DEBUG &&\n      console.debug(`in saveDatabase(${dbname}, ${dbstring}, ${callback})`);\n\n    const saveCallback = (result: { success: boolean } | Error) => {\n      if (result === null || result === undefined) {\n        callback(undefined);\n      } else if (\n        typeof result === \"object\" &&\n        Object.hasOwn(result, \"success\") &&\n        result &&\n        (result as { success: boolean }).success === true\n      ) {\n        callback(undefined);\n      } else {\n        callback(new Error(\"Error saving database: \" + result));\n      }\n\n      if (this.options.closeAfterSave === true) {\n        this.#closeDatabase();\n      }\n    };\n\n    if (this.catalog === null || this.catalog.db === null) {\n      this.catalog = new SylvieCatalog(() => {\n        this.saveDatabase(dbname, dbstring, saveCallback);\n      });\n\n      return;\n    }\n\n    encryptData(dbstring, this.#secret)\n      .then((encryptedDbString) => {\n        // lazy open/create db reference so dont -need- callback in constructor\n        DEBUG && console.debug(`ENCRYPTED STRING: ${encryptedDbString}`);\n        // set (add/update) entry to AKV database\n        this.catalog\n          .setAppKeyAsync(this.app, dbname, encryptedDbString)\n          .then((res) => {\n            callback(res);\n          })\n          .catch((err) => {\n            callback(err);\n          });\n      })\n      .catch((err) => {\n        callback(err);\n      });\n  };\n\n  async saveDatabaseAsync(\n    dbname: string,\n    dbstring: string\n  ): Promise<{ success: true }> {\n    return new Promise((resolve, reject) => {\n      const saveCallback = (result: { success: boolean } | Error) => {\n        if (result === null || result === undefined) {\n          resolve(undefined);\n        } else if (\n          typeof result === \"object\" &&\n          Object.hasOwn(result, \"success\") &&\n          result &&\n          (result as { success: boolean }).success === true\n        ) {\n          resolve(undefined);\n        } else {\n          reject(new Error(\"Error saving database: \" + result));\n        }\n\n        if (this.options.closeAfterSave === true) {\n          this.#closeDatabase();\n        }\n      };\n\n      if (this.catalog === null || this.catalog.db === null) {\n        this.catalog = new SylvieCatalog(() => {\n          this.saveDatabase(dbname, dbstring, saveCallback);\n        });\n\n        return;\n      }\n\n      encryptData(dbstring, this.#secret)\n        .then((encryptedDbString) => {\n          // lazy open/create db reference so dont -need- callback in constructor\n          DEBUG && console.debug(`ENCRYPTED STRING: ${encryptedDbString}`);\n          // set (add/update) entry to AKV database\n          this.catalog\n            .setAppKeyAsync(this.app, dbname, encryptedDbString)\n            .then((res) => {\n              if (res.success === true) {\n                resolve(res);\n              } else {\n                reject(res);\n              }\n            })\n            .catch((err) => {\n              reject(err);\n            });\n        })\n        .catch((err) => {\n          reject(err);\n        });\n    });\n  }\n\n  /**\n   * Deletes a serialized db from the catalog.\n   *\n   * @example\n   * // DELETE DATABASE\n   * // delete 'finance'/'test' value from catalog\n   * idbAdapter.deleteDatabase('test', function {\n   *   // database deleted\n   * });\n   *\n   * @param {string} dbname - the name of the database to delete from the catalog.\n   * @param {function=} callback - (Optional) executed on database delete\n   * @memberof SylvieIndexedAdapter\n   */\n  deleteDatabase = (\n    dbname: string,\n    callback?: (\n      _: Error | { success: true } | { success: false; error: Error }\n    ) => any\n  ) => {\n    // lazy open/create db reference and pass callback ahead\n    if (this.catalog === null || this.catalog.db === null) {\n      this.catalog = new SylvieCatalog((catalog) => {\n        this.catalog = catalog;\n        this.deleteDatabase(dbname, callback);\n      });\n\n      return;\n    }\n\n    // catalog was already initialized, so just lookup object and delete by id\n    this.catalog\n      .getAppKeyAsync(this.app, dbname)\n      .then((result) => {\n        const id = result.id;\n        if (id !== 0) {\n          this.catalog\n            .deleteAppKeyAsync(id)\n            .then((res) => {\n              if (typeof callback === \"function\") {\n                callback(res);\n              }\n            })\n            .catch((err) => {\n              if (typeof callback === \"function\") {\n                callback({ success: false, error: err });\n              }\n            });\n        }\n      })\n      .catch((err) => {\n        if (typeof callback === \"function\") {\n          callback({ success: false, error: err });\n        }\n      });\n  };\n\n  async deleteDatabaseAsync(dbname: string): Promise<{\n    success: true;\n  }> {\n    // lazy open/create db reference and pass callback ahead\n    return new Promise((resolve, reject) => {\n      if (this.catalog === null || this.catalog.db === null) {\n        this.catalog = new SylvieCatalog((catalog) => {\n          this.catalog = catalog;\n          return this.deleteDatabaseAsync(dbname);\n        });\n      }\n\n      // catalog was already initialized, so just lookup object and delete by id\n      this.catalog\n        .getAppKeyAsync(this.app, dbname)\n        .then((result) => {\n          const id = result.id;\n          if (id !== 0) {\n            this.catalog\n              .deleteAppKeyAsync(id)\n              .then((res) => {\n                if (res.success === true) {\n                  resolve(res);\n                } else {\n                  reject(res);\n                }\n              })\n              .catch((err) => {\n                reject(err);\n              });\n          }\n        })\n        .catch((err) => {\n          reject(err);\n        });\n    });\n  }\n\n  /**\n   * Changes the password of a database and re-encrypts the database with the new password.\n   * @param {string} dbName The name of the database to change the password of.\n   * @param {string} newPassword The new password to encrypt the database with.\n   * @memberof CryptedIndexedDBAdapter\n   * @returns {Promise<void>} A promise that resolves when the password has been changed.\n   * @throws {Error} If the adapter is not open.\n   * @example\n   * await adapter.changePassword(\"mydb\", \"newpassword\");\n   * // The database \"mydb\" is now encrypted with the password \"newpassword\".\n   * // The old password will no longer work.\n   */\n  async changePassword(dbname: string, newPassword: string): Promise<void> {\n    return new Promise((resolve, reject) => {\n      this.loadDatabase(dbname, (serializedDbString) => {\n        const oldPassword = this.#secret;\n        this.#secret = newPassword;\n        this.saveDatabase(dbname, serializedDbString, (responseString) => {\n          if (responseString) {\n            this.#secret = oldPassword;\n            if ((responseString as { success: boolean }).success === true) {\n              resolve();\n            } else {\n              reject(responseString);\n            }\n          }\n          resolve();\n        });\n      });\n    });\n  }\n\n  /**\n   * Removes all database partitions and pages with the base filename passed in.\n   * This utility method does not (yet) guarantee async deletions will be completed before returning\n   *\n   * @param {string} dbname - the base filename which container, partitions, or pages are derived\n   * @memberof SylvieIndexedAdapter\n   */\n  deleteDatabasePartitions = (dbname) => {\n    this.getDatabaseList((result) => {\n      result.forEach((str) => {\n        if (str.startsWith(dbname)) {\n          this.deleteDatabase(str);\n        }\n      });\n    });\n  };\n\n  /**\n   * Retrieves object array of catalog entries for current app.\n   *\n   * @example\n   * idbAdapter.getDatabaseList(function(result) {\n   *   // result is array of string names for that appcontext ('finance')\n   *   result.forEach(function(str) {\n   *     console.log(str);\n   *   });\n   * });\n   *\n   * @param {function} callback - should accept array of database names in the catalog for current app.\n   * @memberof SylvieIndexedAdapter\n   */\n  getDatabaseList = (callback) => {\n    // lazy open/create db reference so dont -need- callback in constructor\n    if (this.catalog === null || this.catalog.db === null) {\n      this.catalog = new SylvieCatalog((cat) => {\n        this.catalog = cat;\n\n        this.getDatabaseList(callback);\n      });\n\n      return;\n    }\n\n    // catalog already initialized\n    // get all keys for current appName, and transpose results so just string array\n    this.catalog.getAppKeys(this.app, (results) => {\n      const names = [];\n\n      for (let idx = 0; idx < results.length; idx++) {\n        names.push(results[idx].key);\n      }\n\n      if (typeof callback === \"function\") {\n        callback(names);\n      } else {\n        names.forEach((obj) => {\n          console.log(obj);\n        });\n      }\n    });\n  };\n\n  getDatabaseListAsync = (): Promise<string[]> => {\n    // lazy open/create db reference so dont -need- callback in constructor\n    return new Promise((resolve, reject) => {\n      if (this.catalog === null || this.catalog.db === null) {\n        this.catalog = new SylvieCatalog((cat) => {\n          this.catalog = cat;\n\n          this.getDatabaseListAsync();\n        });\n\n        return;\n      }\n\n      // catalog already initialized\n      // get all keys for current appName, and transpose results so just string array\n      this.catalog.getAppKeys(this.app, (results) => {\n        const names: string[] = [];\n\n        for (let idx = 0; idx < results.length; idx++) {\n          names.push(results[idx].key);\n        }\n\n        resolve(names);\n      });\n    });\n  };\n\n  /**\n   * Allows retrieval of list of all keys in catalog along with size\n   *\n   * @param {function} callback - (Optional) callback to accept result array.\n   * @memberof SylvieIndexedAdapter\n   */\n  getCatalogSummary = (callback) => {\n    // lazy open/create db reference\n    if (this.catalog === null || this.catalog.db === null) {\n      this.catalog = new SylvieCatalog((cat) => {\n        this.catalog = cat;\n\n        this.getCatalogSummary(callback);\n      });\n\n      return;\n    }\n\n    // catalog already initialized\n    // get all keys for current appName, and transpose results so just string array\n    this.catalog.getAllKeys((results) => {\n      const entries = [];\n      let obj;\n      let size;\n      let oapp;\n      let okey;\n      let oval;\n\n      for (let idx = 0; idx < results.length; idx++) {\n        obj = results[idx];\n        oapp = obj.app || \"\";\n        okey = obj.key || \"\";\n        oval = obj.val || \"\";\n\n        // app and key are composited into an appkey column so we will mult by 2\n        size = oapp.length * 2 + okey.length * 2 + oval.length + 1;\n\n        entries.push({ app: obj.app, key: obj.key, size: size });\n      }\n\n      if (typeof callback === \"function\") {\n        callback(entries);\n      } else {\n        entries.forEach((obj) => {\n          console.log(obj);\n        });\n      }\n    });\n  };\n}\n\nif (typeof window !== \"undefined\") {\n  Object.assign(window, {\n    IndexedDBAdapter: CryptedIndexedDBAdapter,\n    CryptedIndexedDBAdapter: CryptedIndexedDBAdapter,\n  });\n}\n"],
  "mappings": "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",
  "names": ["base64ToBytes", "str", "index", "missingOctets", "n", "result", "buffer", "i", "j", "getBase64Code", "__name", "base64abc", "base64codes", "char", "charCode", "code", "bytesToBase64", "bytes", "l", "getPasswordKey", "__name", "password", "enc", "deriveKey", "passwordKey", "salt", "keyUsage", "encryptData", "secretData", "__async", "iv", "aesKey", "encryptedContent", "encryptedContentArr", "buff", "bytesToBase64", "decryptData", "encryptedData", "encryptedDataBuff", "base64ToBytes", "data", "decryptedContent", "_initializeCatalog", "initializeCatalog_fn", "SylvieCatalog", "callback", "__privateAdd", "__privateMethod", "res", "err", "resolve", "reject", "openRequest", "target", "thisDB", "objectStore", "app", "key", "__async", "index", "appkey", "request", "lres", "e", "val", "store", "requestPut", "id", "singleKeyRange", "cursor", "localdata", "data", "cur", "currObject", "usercallback", "__name", "cat", "DEBUG", "_secret", "_closeDatabase", "_checkIDBAvailability", "checkIDBAvailability_fn", "CryptedIndexedDBAdapter", "options", "__privateAdd", "__name", "dbname", "callback", "SylvieCatalog", "catalog", "e", "props", "success", "val", "decryptData", "__privateGet", "decryptedDbString", "err", "__async", "resolve", "reject", "str", "dbstring", "saveCallback", "result", "encryptData", "encryptedDbString", "res", "id", "cat", "results", "names", "idx", "obj", "entries", "size", "oapp", "okey", "oval", "__privateMethod", "__privateSet", "secret", "newPassword", "serializedDbString", "oldPassword", "responseString"]
}
